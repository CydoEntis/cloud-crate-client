/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as publicRouteImport } from './routes/(public)/route'
import { Route as protectedRouteImport } from './routes/(protected)/route'
import { Route as IndexImport } from './routes/index'
import { Route as protectedFilesImport } from './routes/(protected)/files'
import { Route as protectedDashboardImport } from './routes/(protected)/dashboard'
import { Route as protectedBucketsImport } from './routes/(protected)/buckets'
import { Route as publicauthRouteImport } from './routes/(public)/(auth)/route'
import { Route as publicauthRegisterImport } from './routes/(public)/(auth)/register'
import { Route as publicauthLoginImport } from './routes/(public)/(auth)/login'

// Create/Update Routes

const publicRouteRoute = publicRouteImport.update({
  id: '/(public)',
  getParentRoute: () => rootRoute,
} as any)

const protectedRouteRoute = protectedRouteImport.update({
  id: '/(protected)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const protectedFilesRoute = protectedFilesImport.update({
  id: '/files',
  path: '/files',
  getParentRoute: () => protectedRouteRoute,
} as any)

const protectedDashboardRoute = protectedDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => protectedRouteRoute,
} as any)

const protectedBucketsRoute = protectedBucketsImport.update({
  id: '/buckets',
  path: '/buckets',
  getParentRoute: () => protectedRouteRoute,
} as any)

const publicauthRouteRoute = publicauthRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => publicRouteRoute,
} as any)

const publicauthRegisterRoute = publicauthRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => publicauthRouteRoute,
} as any)

const publicauthLoginRoute = publicauthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => publicauthRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(protected)': {
      id: '/(protected)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedRouteImport
      parentRoute: typeof rootRoute
    }
    '/(public)': {
      id: '/(public)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicRouteImport
      parentRoute: typeof rootRoute
    }
    '/(public)/(auth)': {
      id: '/(public)/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicauthRouteImport
      parentRoute: typeof publicRouteImport
    }
    '/(protected)/buckets': {
      id: '/(protected)/buckets'
      path: '/buckets'
      fullPath: '/buckets'
      preLoaderRoute: typeof protectedBucketsImport
      parentRoute: typeof protectedRouteImport
    }
    '/(protected)/dashboard': {
      id: '/(protected)/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof protectedDashboardImport
      parentRoute: typeof protectedRouteImport
    }
    '/(protected)/files': {
      id: '/(protected)/files'
      path: '/files'
      fullPath: '/files'
      preLoaderRoute: typeof protectedFilesImport
      parentRoute: typeof protectedRouteImport
    }
    '/(public)/(auth)/login': {
      id: '/(public)/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof publicauthLoginImport
      parentRoute: typeof publicauthRouteImport
    }
    '/(public)/(auth)/register': {
      id: '/(public)/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof publicauthRegisterImport
      parentRoute: typeof publicauthRouteImport
    }
  }
}

// Create and export the route tree

interface protectedRouteRouteChildren {
  protectedBucketsRoute: typeof protectedBucketsRoute
  protectedDashboardRoute: typeof protectedDashboardRoute
  protectedFilesRoute: typeof protectedFilesRoute
}

const protectedRouteRouteChildren: protectedRouteRouteChildren = {
  protectedBucketsRoute: protectedBucketsRoute,
  protectedDashboardRoute: protectedDashboardRoute,
  protectedFilesRoute: protectedFilesRoute,
}

const protectedRouteRouteWithChildren = protectedRouteRoute._addFileChildren(
  protectedRouteRouteChildren,
)

interface publicauthRouteRouteChildren {
  publicauthLoginRoute: typeof publicauthLoginRoute
  publicauthRegisterRoute: typeof publicauthRegisterRoute
}

const publicauthRouteRouteChildren: publicauthRouteRouteChildren = {
  publicauthLoginRoute: publicauthLoginRoute,
  publicauthRegisterRoute: publicauthRegisterRoute,
}

const publicauthRouteRouteWithChildren = publicauthRouteRoute._addFileChildren(
  publicauthRouteRouteChildren,
)

interface publicRouteRouteChildren {
  publicauthRouteRoute: typeof publicauthRouteRouteWithChildren
}

const publicRouteRouteChildren: publicRouteRouteChildren = {
  publicauthRouteRoute: publicauthRouteRouteWithChildren,
}

const publicRouteRouteWithChildren = publicRouteRoute._addFileChildren(
  publicRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof publicauthRouteRouteWithChildren
  '/buckets': typeof protectedBucketsRoute
  '/dashboard': typeof protectedDashboardRoute
  '/files': typeof protectedFilesRoute
  '/login': typeof publicauthLoginRoute
  '/register': typeof publicauthRegisterRoute
}

export interface FileRoutesByTo {
  '/': typeof publicauthRouteRouteWithChildren
  '/buckets': typeof protectedBucketsRoute
  '/dashboard': typeof protectedDashboardRoute
  '/files': typeof protectedFilesRoute
  '/login': typeof publicauthLoginRoute
  '/register': typeof publicauthRegisterRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(protected)': typeof protectedRouteRouteWithChildren
  '/(public)': typeof publicRouteRouteWithChildren
  '/(public)/(auth)': typeof publicauthRouteRouteWithChildren
  '/(protected)/buckets': typeof protectedBucketsRoute
  '/(protected)/dashboard': typeof protectedDashboardRoute
  '/(protected)/files': typeof protectedFilesRoute
  '/(public)/(auth)/login': typeof publicauthLoginRoute
  '/(public)/(auth)/register': typeof publicauthRegisterRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/buckets' | '/dashboard' | '/files' | '/login' | '/register'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/buckets' | '/dashboard' | '/files' | '/login' | '/register'
  id:
    | '__root__'
    | '/'
    | '/(protected)'
    | '/(public)'
    | '/(public)/(auth)'
    | '/(protected)/buckets'
    | '/(protected)/dashboard'
    | '/(protected)/files'
    | '/(public)/(auth)/login'
    | '/(public)/(auth)/register'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  protectedRouteRoute: typeof protectedRouteRouteWithChildren
  publicRouteRoute: typeof publicRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  protectedRouteRoute: protectedRouteRouteWithChildren,
  publicRouteRoute: publicRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(protected)",
        "/(public)"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(protected)": {
      "filePath": "(protected)/route.tsx",
      "children": [
        "/(protected)/buckets",
        "/(protected)/dashboard",
        "/(protected)/files"
      ]
    },
    "/(public)": {
      "filePath": "(public)/route.tsx",
      "children": [
        "/(public)/(auth)"
      ]
    },
    "/(public)/(auth)": {
      "filePath": "(public)/(auth)/route.tsx",
      "parent": "/(public)",
      "children": [
        "/(public)/(auth)/login",
        "/(public)/(auth)/register"
      ]
    },
    "/(protected)/buckets": {
      "filePath": "(protected)/buckets.tsx",
      "parent": "/(protected)"
    },
    "/(protected)/dashboard": {
      "filePath": "(protected)/dashboard.tsx",
      "parent": "/(protected)"
    },
    "/(protected)/files": {
      "filePath": "(protected)/files.tsx",
      "parent": "/(protected)"
    },
    "/(public)/(auth)/login": {
      "filePath": "(public)/(auth)/login.tsx",
      "parent": "/(public)/(auth)"
    },
    "/(public)/(auth)/register": {
      "filePath": "(public)/(auth)/register.tsx",
      "parent": "/(public)/(auth)"
    }
  }
}
ROUTE_MANIFEST_END */
