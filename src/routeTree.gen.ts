/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as FilesImport } from './routes/files'
import { Route as IndexImport } from './routes/index'
import { Route as PublicRegisterImport } from './routes/_public/register'
import { Route as PublicPublicImport } from './routes/_public/public'
import { Route as PublicLoginImport } from './routes/_public/login'
import { Route as PrivateDashboardImport } from './routes/_private/dashboard'
import { Route as PrivatePrivateImport } from './routes/_private/_private'

// Create/Update Routes

const FilesRoute = FilesImport.update({
  id: '/files',
  path: '/files',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PublicRegisterRoute = PublicRegisterImport.update({
  id: '/_public/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const PublicPublicRoute = PublicPublicImport.update({
  id: '/_public/public',
  path: '/public',
  getParentRoute: () => rootRoute,
} as any)

const PublicLoginRoute = PublicLoginImport.update({
  id: '/_public/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const PrivateDashboardRoute = PrivateDashboardImport.update({
  id: '/_private/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const PrivatePrivateRoute = PrivatePrivateImport.update({
  id: '/_private/_private',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/files': {
      id: '/files'
      path: '/files'
      fullPath: '/files'
      preLoaderRoute: typeof FilesImport
      parentRoute: typeof rootRoute
    }
    '/_private/_private': {
      id: '/_private/_private'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivatePrivateImport
      parentRoute: typeof rootRoute
    }
    '/_private/dashboard': {
      id: '/_private/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof PrivateDashboardImport
      parentRoute: typeof rootRoute
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginImport
      parentRoute: typeof rootRoute
    }
    '/_public/public': {
      id: '/_public/public'
      path: '/public'
      fullPath: '/public'
      preLoaderRoute: typeof PublicPublicImport
      parentRoute: typeof rootRoute
    }
    '/_public/register': {
      id: '/_public/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof PublicRegisterImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/files': typeof FilesRoute
  '': typeof PrivatePrivateRoute
  '/dashboard': typeof PrivateDashboardRoute
  '/login': typeof PublicLoginRoute
  '/public': typeof PublicPublicRoute
  '/register': typeof PublicRegisterRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/files': typeof FilesRoute
  '': typeof PrivatePrivateRoute
  '/dashboard': typeof PrivateDashboardRoute
  '/login': typeof PublicLoginRoute
  '/public': typeof PublicPublicRoute
  '/register': typeof PublicRegisterRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/files': typeof FilesRoute
  '/_private/_private': typeof PrivatePrivateRoute
  '/_private/dashboard': typeof PrivateDashboardRoute
  '/_public/login': typeof PublicLoginRoute
  '/_public/public': typeof PublicPublicRoute
  '/_public/register': typeof PublicRegisterRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/files'
    | ''
    | '/dashboard'
    | '/login'
    | '/public'
    | '/register'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/files' | '' | '/dashboard' | '/login' | '/public' | '/register'
  id:
    | '__root__'
    | '/'
    | '/files'
    | '/_private/_private'
    | '/_private/dashboard'
    | '/_public/login'
    | '/_public/public'
    | '/_public/register'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FilesRoute: typeof FilesRoute
  PrivatePrivateRoute: typeof PrivatePrivateRoute
  PrivateDashboardRoute: typeof PrivateDashboardRoute
  PublicLoginRoute: typeof PublicLoginRoute
  PublicPublicRoute: typeof PublicPublicRoute
  PublicRegisterRoute: typeof PublicRegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FilesRoute: FilesRoute,
  PrivatePrivateRoute: PrivatePrivateRoute,
  PrivateDashboardRoute: PrivateDashboardRoute,
  PublicLoginRoute: PublicLoginRoute,
  PublicPublicRoute: PublicPublicRoute,
  PublicRegisterRoute: PublicRegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/files",
        "/_private/_private",
        "/_private/dashboard",
        "/_public/login",
        "/_public/public",
        "/_public/register"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/files": {
      "filePath": "files.tsx"
    },
    "/_private/_private": {
      "filePath": "_private/_private.tsx"
    },
    "/_private/dashboard": {
      "filePath": "_private/dashboard.tsx"
    },
    "/_public/login": {
      "filePath": "_public/login.tsx"
    },
    "/_public/public": {
      "filePath": "_public/public.tsx"
    },
    "/_public/register": {
      "filePath": "_public/register.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
