/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as publicRouteRouteImport } from './routes/(public)/route'
import { Route as protectedRouteRouteImport } from './routes/(protected)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as protectedTrashRouteImport } from './routes/(protected)/trash'
import { Route as protectedAdminRouteImport } from './routes/(protected)/admin'
import { Route as publicauthRouteRouteImport } from './routes/(public)/(auth)/route'
import { Route as protectedCratesIndexRouteImport } from './routes/(protected)/crates/index'
import { Route as publicInviteTokenRouteImport } from './routes/(public)/invite/$token'
import { Route as publicauthResetPasswordRouteImport } from './routes/(public)/(auth)/reset-password'
import { Route as publicauthRegisterRouteImport } from './routes/(public)/(auth)/register'
import { Route as publicauthLoginRouteImport } from './routes/(public)/(auth)/login'
import { Route as publicauthForgotPasswordRouteImport } from './routes/(public)/(auth)/forgot-password'
import { Route as protectedCratesCrateIdIndexRouteImport } from './routes/(protected)/crates/$crateId/index'
import { Route as protectedCratesCrateIdFoldersFolderIdRouteImport } from './routes/(protected)/crates/$crateId/folders/$folderId'

const publicRouteRoute = publicRouteRouteImport.update({
  id: '/(public)',
  getParentRoute: () => rootRouteImport,
} as any)
const protectedRouteRoute = protectedRouteRouteImport.update({
  id: '/(protected)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const protectedTrashRoute = protectedTrashRouteImport.update({
  id: '/trash',
  path: '/trash',
  getParentRoute: () => protectedRouteRoute,
} as any)
const protectedAdminRoute = protectedAdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => protectedRouteRoute,
} as any)
const publicauthRouteRoute = publicauthRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => publicRouteRoute,
} as any)
const protectedCratesIndexRoute = protectedCratesIndexRouteImport.update({
  id: '/crates/',
  path: '/crates/',
  getParentRoute: () => protectedRouteRoute,
} as any)
const publicInviteTokenRoute = publicInviteTokenRouteImport.update({
  id: '/invite/$token',
  path: '/invite/$token',
  getParentRoute: () => publicRouteRoute,
} as any)
const publicauthResetPasswordRoute = publicauthResetPasswordRouteImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => publicauthRouteRoute,
} as any)
const publicauthRegisterRoute = publicauthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => publicauthRouteRoute,
} as any)
const publicauthLoginRoute = publicauthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => publicauthRouteRoute,
} as any)
const publicauthForgotPasswordRoute =
  publicauthForgotPasswordRouteImport.update({
    id: '/forgot-password',
    path: '/forgot-password',
    getParentRoute: () => publicauthRouteRoute,
  } as any)
const protectedCratesCrateIdIndexRoute =
  protectedCratesCrateIdIndexRouteImport.update({
    id: '/crates/$crateId/',
    path: '/crates/$crateId/',
    getParentRoute: () => protectedRouteRoute,
  } as any)
const protectedCratesCrateIdFoldersFolderIdRoute =
  protectedCratesCrateIdFoldersFolderIdRouteImport.update({
    id: '/crates/$crateId/folders/$folderId',
    path: '/crates/$crateId/folders/$folderId',
    getParentRoute: () => protectedRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof publicauthRouteRouteWithChildren
  '/admin': typeof protectedAdminRoute
  '/trash': typeof protectedTrashRoute
  '/forgot-password': typeof publicauthForgotPasswordRoute
  '/login': typeof publicauthLoginRoute
  '/register': typeof publicauthRegisterRoute
  '/reset-password': typeof publicauthResetPasswordRoute
  '/invite/$token': typeof publicInviteTokenRoute
  '/crates': typeof protectedCratesIndexRoute
  '/crates/$crateId': typeof protectedCratesCrateIdIndexRoute
  '/crates/$crateId/folders/$folderId': typeof protectedCratesCrateIdFoldersFolderIdRoute
}
export interface FileRoutesByTo {
  '/': typeof publicauthRouteRouteWithChildren
  '/admin': typeof protectedAdminRoute
  '/trash': typeof protectedTrashRoute
  '/forgot-password': typeof publicauthForgotPasswordRoute
  '/login': typeof publicauthLoginRoute
  '/register': typeof publicauthRegisterRoute
  '/reset-password': typeof publicauthResetPasswordRoute
  '/invite/$token': typeof publicInviteTokenRoute
  '/crates': typeof protectedCratesIndexRoute
  '/crates/$crateId': typeof protectedCratesCrateIdIndexRoute
  '/crates/$crateId/folders/$folderId': typeof protectedCratesCrateIdFoldersFolderIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(protected)': typeof protectedRouteRouteWithChildren
  '/(public)': typeof publicRouteRouteWithChildren
  '/(public)/(auth)': typeof publicauthRouteRouteWithChildren
  '/(protected)/admin': typeof protectedAdminRoute
  '/(protected)/trash': typeof protectedTrashRoute
  '/(public)/(auth)/forgot-password': typeof publicauthForgotPasswordRoute
  '/(public)/(auth)/login': typeof publicauthLoginRoute
  '/(public)/(auth)/register': typeof publicauthRegisterRoute
  '/(public)/(auth)/reset-password': typeof publicauthResetPasswordRoute
  '/(public)/invite/$token': typeof publicInviteTokenRoute
  '/(protected)/crates/': typeof protectedCratesIndexRoute
  '/(protected)/crates/$crateId/': typeof protectedCratesCrateIdIndexRoute
  '/(protected)/crates/$crateId/folders/$folderId': typeof protectedCratesCrateIdFoldersFolderIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/trash'
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/reset-password'
    | '/invite/$token'
    | '/crates'
    | '/crates/$crateId'
    | '/crates/$crateId/folders/$folderId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/trash'
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/reset-password'
    | '/invite/$token'
    | '/crates'
    | '/crates/$crateId'
    | '/crates/$crateId/folders/$folderId'
  id:
    | '__root__'
    | '/'
    | '/(protected)'
    | '/(public)'
    | '/(public)/(auth)'
    | '/(protected)/admin'
    | '/(protected)/trash'
    | '/(public)/(auth)/forgot-password'
    | '/(public)/(auth)/login'
    | '/(public)/(auth)/register'
    | '/(public)/(auth)/reset-password'
    | '/(public)/invite/$token'
    | '/(protected)/crates/'
    | '/(protected)/crates/$crateId/'
    | '/(protected)/crates/$crateId/folders/$folderId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  protectedRouteRoute: typeof protectedRouteRouteWithChildren
  publicRouteRoute: typeof publicRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(public)': {
      id: '/(public)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(protected)': {
      id: '/(protected)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(protected)/trash': {
      id: '/(protected)/trash'
      path: '/trash'
      fullPath: '/trash'
      preLoaderRoute: typeof protectedTrashRouteImport
      parentRoute: typeof protectedRouteRoute
    }
    '/(protected)/admin': {
      id: '/(protected)/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof protectedAdminRouteImport
      parentRoute: typeof protectedRouteRoute
    }
    '/(public)/(auth)': {
      id: '/(public)/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicauthRouteRouteImport
      parentRoute: typeof publicRouteRoute
    }
    '/(protected)/crates/': {
      id: '/(protected)/crates/'
      path: '/crates'
      fullPath: '/crates'
      preLoaderRoute: typeof protectedCratesIndexRouteImport
      parentRoute: typeof protectedRouteRoute
    }
    '/(public)/invite/$token': {
      id: '/(public)/invite/$token'
      path: '/invite/$token'
      fullPath: '/invite/$token'
      preLoaderRoute: typeof publicInviteTokenRouteImport
      parentRoute: typeof publicRouteRoute
    }
    '/(public)/(auth)/reset-password': {
      id: '/(public)/(auth)/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof publicauthResetPasswordRouteImport
      parentRoute: typeof publicauthRouteRoute
    }
    '/(public)/(auth)/register': {
      id: '/(public)/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof publicauthRegisterRouteImport
      parentRoute: typeof publicauthRouteRoute
    }
    '/(public)/(auth)/login': {
      id: '/(public)/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof publicauthLoginRouteImport
      parentRoute: typeof publicauthRouteRoute
    }
    '/(public)/(auth)/forgot-password': {
      id: '/(public)/(auth)/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof publicauthForgotPasswordRouteImport
      parentRoute: typeof publicauthRouteRoute
    }
    '/(protected)/crates/$crateId/': {
      id: '/(protected)/crates/$crateId/'
      path: '/crates/$crateId'
      fullPath: '/crates/$crateId'
      preLoaderRoute: typeof protectedCratesCrateIdIndexRouteImport
      parentRoute: typeof protectedRouteRoute
    }
    '/(protected)/crates/$crateId/folders/$folderId': {
      id: '/(protected)/crates/$crateId/folders/$folderId'
      path: '/crates/$crateId/folders/$folderId'
      fullPath: '/crates/$crateId/folders/$folderId'
      preLoaderRoute: typeof protectedCratesCrateIdFoldersFolderIdRouteImport
      parentRoute: typeof protectedRouteRoute
    }
  }
}

interface protectedRouteRouteChildren {
  protectedAdminRoute: typeof protectedAdminRoute
  protectedTrashRoute: typeof protectedTrashRoute
  protectedCratesIndexRoute: typeof protectedCratesIndexRoute
  protectedCratesCrateIdIndexRoute: typeof protectedCratesCrateIdIndexRoute
  protectedCratesCrateIdFoldersFolderIdRoute: typeof protectedCratesCrateIdFoldersFolderIdRoute
}

const protectedRouteRouteChildren: protectedRouteRouteChildren = {
  protectedAdminRoute: protectedAdminRoute,
  protectedTrashRoute: protectedTrashRoute,
  protectedCratesIndexRoute: protectedCratesIndexRoute,
  protectedCratesCrateIdIndexRoute: protectedCratesCrateIdIndexRoute,
  protectedCratesCrateIdFoldersFolderIdRoute:
    protectedCratesCrateIdFoldersFolderIdRoute,
}

const protectedRouteRouteWithChildren = protectedRouteRoute._addFileChildren(
  protectedRouteRouteChildren,
)

interface publicauthRouteRouteChildren {
  publicauthForgotPasswordRoute: typeof publicauthForgotPasswordRoute
  publicauthLoginRoute: typeof publicauthLoginRoute
  publicauthRegisterRoute: typeof publicauthRegisterRoute
  publicauthResetPasswordRoute: typeof publicauthResetPasswordRoute
}

const publicauthRouteRouteChildren: publicauthRouteRouteChildren = {
  publicauthForgotPasswordRoute: publicauthForgotPasswordRoute,
  publicauthLoginRoute: publicauthLoginRoute,
  publicauthRegisterRoute: publicauthRegisterRoute,
  publicauthResetPasswordRoute: publicauthResetPasswordRoute,
}

const publicauthRouteRouteWithChildren = publicauthRouteRoute._addFileChildren(
  publicauthRouteRouteChildren,
)

interface publicRouteRouteChildren {
  publicauthRouteRoute: typeof publicauthRouteRouteWithChildren
  publicInviteTokenRoute: typeof publicInviteTokenRoute
}

const publicRouteRouteChildren: publicRouteRouteChildren = {
  publicauthRouteRoute: publicauthRouteRouteWithChildren,
  publicInviteTokenRoute: publicInviteTokenRoute,
}

const publicRouteRouteWithChildren = publicRouteRoute._addFileChildren(
  publicRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  protectedRouteRoute: protectedRouteRouteWithChildren,
  publicRouteRoute: publicRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
