/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as protectedRouteImport } from './routes/(protected)/route'
import { Route as IndexImport } from './routes/index'
import { Route as publicRegisterImport } from './routes/(public)/register'
import { Route as publicPublicImport } from './routes/(public)/public'
import { Route as publicLoginImport } from './routes/(public)/login'
import { Route as protectedFilesImport } from './routes/(protected)/files'
import { Route as protectedDashboardImport } from './routes/(protected)/dashboard'

// Create/Update Routes

const protectedRouteRoute = protectedRouteImport.update({
  id: '/(protected)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const publicRegisterRoute = publicRegisterImport.update({
  id: '/(public)/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const publicPublicRoute = publicPublicImport.update({
  id: '/(public)/public',
  path: '/public',
  getParentRoute: () => rootRoute,
} as any)

const publicLoginRoute = publicLoginImport.update({
  id: '/(public)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const protectedFilesRoute = protectedFilesImport.update({
  id: '/files',
  path: '/files',
  getParentRoute: () => protectedRouteRoute,
} as any)

const protectedDashboardRoute = protectedDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => protectedRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(protected)': {
      id: '/(protected)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedRouteImport
      parentRoute: typeof rootRoute
    }
    '/(protected)/dashboard': {
      id: '/(protected)/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof protectedDashboardImport
      parentRoute: typeof protectedRouteImport
    }
    '/(protected)/files': {
      id: '/(protected)/files'
      path: '/files'
      fullPath: '/files'
      preLoaderRoute: typeof protectedFilesImport
      parentRoute: typeof protectedRouteImport
    }
    '/(public)/login': {
      id: '/(public)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof publicLoginImport
      parentRoute: typeof rootRoute
    }
    '/(public)/public': {
      id: '/(public)/public'
      path: '/public'
      fullPath: '/public'
      preLoaderRoute: typeof publicPublicImport
      parentRoute: typeof rootRoute
    }
    '/(public)/register': {
      id: '/(public)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof publicRegisterImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface protectedRouteRouteChildren {
  protectedDashboardRoute: typeof protectedDashboardRoute
  protectedFilesRoute: typeof protectedFilesRoute
}

const protectedRouteRouteChildren: protectedRouteRouteChildren = {
  protectedDashboardRoute: protectedDashboardRoute,
  protectedFilesRoute: protectedFilesRoute,
}

const protectedRouteRouteWithChildren = protectedRouteRoute._addFileChildren(
  protectedRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof protectedRouteRouteWithChildren
  '/dashboard': typeof protectedDashboardRoute
  '/files': typeof protectedFilesRoute
  '/login': typeof publicLoginRoute
  '/public': typeof publicPublicRoute
  '/register': typeof publicRegisterRoute
}

export interface FileRoutesByTo {
  '/': typeof protectedRouteRouteWithChildren
  '/dashboard': typeof protectedDashboardRoute
  '/files': typeof protectedFilesRoute
  '/login': typeof publicLoginRoute
  '/public': typeof publicPublicRoute
  '/register': typeof publicRegisterRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(protected)': typeof protectedRouteRouteWithChildren
  '/(protected)/dashboard': typeof protectedDashboardRoute
  '/(protected)/files': typeof protectedFilesRoute
  '/(public)/login': typeof publicLoginRoute
  '/(public)/public': typeof publicPublicRoute
  '/(public)/register': typeof publicRegisterRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/dashboard' | '/files' | '/login' | '/public' | '/register'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/dashboard' | '/files' | '/login' | '/public' | '/register'
  id:
    | '__root__'
    | '/'
    | '/(protected)'
    | '/(protected)/dashboard'
    | '/(protected)/files'
    | '/(public)/login'
    | '/(public)/public'
    | '/(public)/register'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  protectedRouteRoute: typeof protectedRouteRouteWithChildren
  publicLoginRoute: typeof publicLoginRoute
  publicPublicRoute: typeof publicPublicRoute
  publicRegisterRoute: typeof publicRegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  protectedRouteRoute: protectedRouteRouteWithChildren,
  publicLoginRoute: publicLoginRoute,
  publicPublicRoute: publicPublicRoute,
  publicRegisterRoute: publicRegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(protected)",
        "/(public)/login",
        "/(public)/public",
        "/(public)/register"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(protected)": {
      "filePath": "(protected)/route.tsx",
      "children": [
        "/(protected)/dashboard",
        "/(protected)/files"
      ]
    },
    "/(protected)/dashboard": {
      "filePath": "(protected)/dashboard.tsx",
      "parent": "/(protected)"
    },
    "/(protected)/files": {
      "filePath": "(protected)/files.tsx",
      "parent": "/(protected)"
    },
    "/(public)/login": {
      "filePath": "(public)/login.tsx"
    },
    "/(public)/public": {
      "filePath": "(public)/public.tsx"
    },
    "/(public)/register": {
      "filePath": "(public)/register.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
