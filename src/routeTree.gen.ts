/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SidebarImport } from './routes/sidebar'
import { Route as LoginImport } from './routes/login'
import { Route as HomeImport } from './routes/home'
import { Route as FilesImport } from './routes/files'
import { Route as FileImport } from './routes/file'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as BucketsImport } from './routes/buckets'
import { Route as AuthenticatedImport } from './routes/_authenticated'

// Create/Update Routes

const SidebarRoute = SidebarImport.update({
  id: '/sidebar',
  path: '/sidebar',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const HomeRoute = HomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRoute,
} as any)

const FilesRoute = FilesImport.update({
  id: '/files',
  path: '/files',
  getParentRoute: () => rootRoute,
} as any)

const FileRoute = FileImport.update({
  id: '/file',
  path: '/file',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const BucketsRoute = BucketsImport.update({
  id: '/buckets',
  path: '/buckets',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/buckets': {
      id: '/buckets'
      path: '/buckets'
      fullPath: '/buckets'
      preLoaderRoute: typeof BucketsImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/file': {
      id: '/file'
      path: '/file'
      fullPath: '/file'
      preLoaderRoute: typeof FileImport
      parentRoute: typeof rootRoute
    }
    '/files': {
      id: '/files'
      path: '/files'
      fullPath: '/files'
      preLoaderRoute: typeof FilesImport
      parentRoute: typeof rootRoute
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/sidebar': {
      id: '/sidebar'
      path: '/sidebar'
      fullPath: '/sidebar'
      preLoaderRoute: typeof SidebarImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '': typeof AuthenticatedRoute
  '/buckets': typeof BucketsRoute
  '/dashboard': typeof DashboardRoute
  '/file': typeof FileRoute
  '/files': typeof FilesRoute
  '/home': typeof HomeRoute
  '/login': typeof LoginRoute
  '/sidebar': typeof SidebarRoute
}

export interface FileRoutesByTo {
  '': typeof AuthenticatedRoute
  '/buckets': typeof BucketsRoute
  '/dashboard': typeof DashboardRoute
  '/file': typeof FileRoute
  '/files': typeof FilesRoute
  '/home': typeof HomeRoute
  '/login': typeof LoginRoute
  '/sidebar': typeof SidebarRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authenticated': typeof AuthenticatedRoute
  '/buckets': typeof BucketsRoute
  '/dashboard': typeof DashboardRoute
  '/file': typeof FileRoute
  '/files': typeof FilesRoute
  '/home': typeof HomeRoute
  '/login': typeof LoginRoute
  '/sidebar': typeof SidebarRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/buckets'
    | '/dashboard'
    | '/file'
    | '/files'
    | '/home'
    | '/login'
    | '/sidebar'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/buckets'
    | '/dashboard'
    | '/file'
    | '/files'
    | '/home'
    | '/login'
    | '/sidebar'
  id:
    | '__root__'
    | '/_authenticated'
    | '/buckets'
    | '/dashboard'
    | '/file'
    | '/files'
    | '/home'
    | '/login'
    | '/sidebar'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRoute
  BucketsRoute: typeof BucketsRoute
  DashboardRoute: typeof DashboardRoute
  FileRoute: typeof FileRoute
  FilesRoute: typeof FilesRoute
  HomeRoute: typeof HomeRoute
  LoginRoute: typeof LoginRoute
  SidebarRoute: typeof SidebarRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRoute,
  BucketsRoute: BucketsRoute,
  DashboardRoute: DashboardRoute,
  FileRoute: FileRoute,
  FilesRoute: FilesRoute,
  HomeRoute: HomeRoute,
  LoginRoute: LoginRoute,
  SidebarRoute: SidebarRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authenticated",
        "/buckets",
        "/dashboard",
        "/file",
        "/files",
        "/home",
        "/login",
        "/sidebar"
      ]
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx"
    },
    "/buckets": {
      "filePath": "buckets.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/file": {
      "filePath": "file.tsx"
    },
    "/files": {
      "filePath": "files.tsx"
    },
    "/home": {
      "filePath": "home.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/sidebar": {
      "filePath": "sidebar.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
